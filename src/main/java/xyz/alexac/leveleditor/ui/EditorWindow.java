/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package xyz.alexac.leveleditor.ui;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.json.Json;
import javax.json.JsonWriter;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import xyz.alexac.leveleditor.model.Block;
import xyz.alexac.leveleditor.model.Project;

/**
 *
 * @author alex-ac
 */
public class EditorWindow extends javax.swing.JFrame implements Observer {
  private final Project project = new Project();
  private final JFileChooser fileChooser = new JFileChooser();
  private File projectFile = null;

  /**
   * Creates new form EditorWindow
   */
  public EditorWindow() {
    initComponents();
    projectView.setProject(project);
    viewport.setProject(project);
    FileNameExtensionFilter filter = new FileNameExtensionFilter(
                            "*.json - Level Editor project file.", "json");
    fileChooser.setFileFilter(filter);
    projectView.getStateController().addObserver(this);
    blockView.setVisible(false);
    blockView.setProject(project);
  }

  @Override
  public void update(Observable o, Object arg) {
    ProjectView.StateController stateController =
                                projectView.getStateController();
    if (o == projectView.getStateController()) {
      switch ((String) arg) {
        case "currentBlock":
          Block b = stateController.getCurrentBlock();
          blockView.setBlock(b);
          if (b != null) {
            BlockViewportController controller =
                                    new BlockViewportController(
                                            b, () -> viewport.repaint());
            this.viewport.setController(controller);
            blockView.setVisible(true);
            blockView.setViewportController(controller);
          } else {
            this.viewport.setController(null);
            blockView.setVisible(false);
            blockView.setViewportController(null);
          }
          break;
      }
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    jSplitPane1 = new javax.swing.JSplitPane();
    jScrollPane1 = new javax.swing.JScrollPane();
    jPanel1 = new javax.swing.JPanel();
    projectView = new xyz.alexac.leveleditor.ui.ProjectView();
    blockView = new xyz.alexac.leveleditor.ui.BlockView();
    viewport = new xyz.alexac.leveleditor.ui.Viewport();
    menuBar = new javax.swing.JMenuBar();
    fileMenu = new javax.swing.JMenu();
    saveProjectMenuItem = new javax.swing.JMenuItem();
    saveProjectAsMenuItem = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setMinimumSize(new java.awt.Dimension(900, 600));
    getContentPane().setLayout(new java.awt.GridBagLayout());

    jScrollPane1.setBorder(null);
    jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
    jScrollPane1.setMinimumSize(new java.awt.Dimension(350, 0));

    jPanel1.setMinimumSize(new java.awt.Dimension(350, 80));
    jPanel1.setLayout(new java.awt.GridBagLayout());
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
    gridBagConstraints.weightx = 0.1;
    jPanel1.add(projectView, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 0.1;
    jPanel1.add(blockView, gridBagConstraints);

    jScrollPane1.setViewportView(jPanel1);

    jSplitPane1.setLeftComponent(jScrollPane1);

    viewport.setMinimumSize(new java.awt.Dimension(600, 600));
    jSplitPane1.setRightComponent(viewport);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.weighty = 0.1;
    getContentPane().add(jSplitPane1, gridBagConstraints);

    fileMenu.setText("File");
    fileMenu.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        saveProjectAs(evt);
      }
    });

    saveProjectMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.META_MASK));
    saveProjectMenuItem.setText("Save Project");
    saveProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        saveProject(evt);
      }
    });
    fileMenu.add(saveProjectMenuItem);

    saveProjectAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.META_MASK));
    saveProjectAsMenuItem.setText("Save Project As");
    fileMenu.add(saveProjectAsMenuItem);

    menuBar.add(fileMenu);

    setJMenuBar(menuBar);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void saveProject(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveProject
    if (projectFile != null) {
      doSaveProject();
    } else {
      saveProjectAs(evt);
    }
  }//GEN-LAST:event_saveProject

  private void saveProjectAs(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveProjectAs
    if (fileChooser.showSaveDialog(this) != JFileChooser.APPROVE_OPTION) {
      return;
    }
    projectFile = fileChooser.getSelectedFile();
    doSaveProject();
  }//GEN-LAST:event_saveProjectAs

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private xyz.alexac.leveleditor.ui.BlockView blockView;
  private javax.swing.JMenu fileMenu;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JSplitPane jSplitPane1;
  private javax.swing.JMenuBar menuBar;
  private xyz.alexac.leveleditor.ui.ProjectView projectView;
  private javax.swing.JMenuItem saveProjectAsMenuItem;
  private javax.swing.JMenuItem saveProjectMenuItem;
  private xyz.alexac.leveleditor.ui.Viewport viewport;
  // End of variables declaration//GEN-END:variables

  private void doSaveProject() {
    try {
      OutputStream fileStream = new FileOutputStream(projectFile);
      OutputStream bufferedStream = new BufferedOutputStream(fileStream);
      JsonWriter writer = Json.createWriter(bufferedStream);
      writer.writeObject(project.toJSON().build());
      writer.close();
    } catch (FileNotFoundException ex) {
      Logger.getLogger(EditorWindow.class.getName()).log(Level.SEVERE, null, ex);
    }
  }
}
